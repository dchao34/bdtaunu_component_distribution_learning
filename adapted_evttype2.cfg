# Perforamnce tuning configuration
# ================================

# evaluation tolerances
rel_tol = 1e-6
abs_tol = 1e-8

# cuda parameters
cuda_device_number = 0
gpu_block_size = 128

# affects self evaluation speed. 
refpt_max_leaf_size = 32768

# affects grid evaluation and numerical integration speed. 
qgrid_max_leaf_size = 32768


# Overall task configuration
# ==========================

# if true, cross validate the adaptive kernel based on the configurations
# in `Base kernel configuration`.
# Note: when true, `cv_method` is overridden to use `lsq_numint` since 
# convolution kernels are not well defined in this case. 
use_adaptive_cv = true

# method to use for cross validation. one of the following:
# lsq_conv: least squares cross validation based on convolution kernel. 
# lsq_numint: least squares cross validation based on convolution kernel. 
cv_method = lsq_numint

# skip cross validation and go directly to density evaluations
skip_cross_validation = false


# Reference data configuration
# ============================

# input file containing the reference points
input_refpts_fname = kde_data_preparation/evttype2.train.csv

# output file containing scatter plot data to visualize the reference points. 
output_scatter_fname = adapted_evttype2_scatter.csv


# Base kernel configuration
# =========================

# base bandwidths 
# Note: when `use_adaptive_cv` is true, this is the bandwidth used 
# to compute the local density corrections; it is also used when 
# evaluating the non-adapted kernel density. 
base_bwx = 0.0032
base_bwy = 0.03

# adaptive density configurations
# Note: `adapted_base_bw(x|y)` is only used when `use_adaptive_cv` is true. 
# futhermore, it is only used to evaluate adapted kernel densities after cross validation.
alpha = 0.5
adapted_base_bwx = 0.0022
adapted_base_bwy = 0.054


# Cross validation bandwidth grid configuration
# =============================================
# if true, use `manual_bwx` and `manual_bwy` to setup the cross validation 
# bandwidth grid. otherwise, use `(start|end|steps)_bw(x|y)` 
# to dedeuce an evenly spaced grid. 
use_manual_bwgrid = false

# output file containing cross validation results for visualization. 
# Note: will only write this file when `use_manual_bwgrid` is false
output_gridsearch_fname = adapted_evttype2_gridsearch.csv

# configure cross validation bandwidth grid
# -----------------------------------------

manual_bwx = 0.001 0.002 0.003
manual_bwy = 0.05 0.06 0.07

start_bwx = 0.0015
end_bwx = 0.0035
steps_bwx = 10
start_bwy = 0.04
end_bwy = 0.07
steps_bwy = 10

# configure numerical integration grid
# ------------------------------------

start_qix = -0.005
end_qix = 0.11
steps_qix = 1000
start_qiy = -0.05
end_qiy = 1.05
steps_qiy = 1000


# Kernel density evaluation queries
# =================================

# if true, evaluate the density that uses the best bandwidth found 
# during grid search. otherwise, use `base_bwx` and `base_bwy` instead. 
# Note: will override to false if `skip_cross_validation` = true
# Note: if `use_adaptive_cv` is true, then will use best bandwidth found
#       only when evaluating adaptive densities, but still use base 
#       bandwidth for non-adaptive evaluation. 
use_gridsearch_best = true

start_qx = -0.005
end_qx = 0.11
steps_qx = 100
start_qy = -0.05
end_qy = 1.05
steps_qy = 100

# output file to visualize evaluation results
output_eval_fname = adapted_evttype2_kde.csv

# output file to visualize adaptive density evaluation results
output_adaptive_eval_fname = adapted_evttype2_akde.csv
